#! /usr/local/bin/python3

import argparse
from datetime import datetime, timedelta
from dateutil import relativedelta
import calendar


def full_week(now: datetime.date = None) -> (str, str):
    if now is None:
        now = datetime.now()

    weekday = now.isoweekday()
    sunday_delta = weekday * -1 if weekday < 7 else 0
    sunday = now + timedelta(days=sunday_delta)
    saturday_delta = 6 - weekday if weekday != 7 else 6
    saturday = now + timedelta(days=saturday_delta)

    dateformat = "%Y.%m.%d"
    return (sunday.strftime(dateformat), saturday.strftime(dateformat))


parser = argparse.ArgumentParser(
    description="Display Date ranges since dates are hard.")
parser.add_argument("--fullweek", action="store_true",
                    help="Print out the full week (Sunday through Saturday) for a given day.")
parser.add_argument("--workweek", action="store_true",
                    help="Print out the work week (Monday through Friday) for a given day.")
parser.add_argument("--test", action="store_true",
                    help="Print out 7 days and their corresponding week (work or full) from the set date (or today). Dates are hard.")
parser.add_argument("--startday", type=datetime.fromisoformat,
                    help="Date to start the range calculation from. If not set, defaults to current day. ISO Format <YYYY-mm-dd>.")

args = parser.parse_args()
if args.test is True:
    for d in range(7):
        day = datetime.now() if args.startday is None else args.startday
        test_day = day + timedelta(days=d)
        sun, sat = full_week(test_day)
        print(f"{test_day.strftime('%Y.%m.%d')} full week: {sun} - {sat}")
elif args.fullweek is True:
    sun, sat = full_week(args.startday)
    print(f"{sun} - {sat}")
elif args.workweek is True:
    print("workweek")
else:
    parser.print_help()
