#! /usr/local/bin/python3

import argparse
from datetime import datetime, timedelta
from dateutil import relativedelta
import calendar


def full_week(now: datetime.date = None) -> (str, str):
    if now is None:
        now = datetime.now()

    weekday = now.isoweekday()
    sunday_delta = weekday * -1 if weekday < 7 else 0
    sunday = now + timedelta(days=sunday_delta)
    saturday_delta = 6 - weekday if weekday != 7 else 6
    saturday = now + timedelta(days=saturday_delta)

    dateformat = "%Y.%m.%d"
    return (sunday.strftime(dateformat), saturday.strftime(dateformat))


parser = argparse.ArgumentParser(
    description="Display Date ranges since dates are hard")
parser.add_argument("--fullweek", action="store_true",
                    help="Print out the full week (Sunday through Saturday) for a given day")
parser.add_argument("--workweek", action="store_true",
                    help="Print out the work week (Monday through Friday) for a given day")
parser.add_argument("--startday", type=datetime.fromisoformat,
                    help="Date to start the range calculation from. If not set, defaults to current day. ISO Format <YYYY-mm-dd>.")

args = parser.parse_args()

# --startday "yyyy-mm-dd"
# --fullweek
# --workweek

if args.fullweek is True:
    sun, sat = full_week(args.startday)
    print(f"{sun} - {sat}")
elif args.workweek is True:
    print("workweek")
else:
    parser.print_help()


# for d in range(7):
#     day = datetime(2019, 7, 10 + d)
#     sun, sat = full_week(day)
#     print(f"{day} full week: {sun} - {sat}")
